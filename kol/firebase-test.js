// Generated by CoffeeScript 1.4.0
(function() {
  var checkLists, createList, data, dropList, fishes, makeListElement, playerData, playerLookup, playerURL, sample_data, setAutoComplete, startUp, wishListURL;

  playerURL = "";

  wishListURL = "https://afh.firebaseio.com/dread/wishlists/";

  playerData = null;

  data = null;

  playerLookup = null;

  dropList = {
    ghost_outfit: {
      name: "Ghost Outfit",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat5.gif"
    },
    sash: {
      name: "Mayor Ghost's Sash",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/mg_sash.gif"
    },
    gavel: {
      name: "Mayor Ghost's Gavel",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/mg_gavel.gif"
    },
    scissors: {
      name: "Mayor Ghost's Scissors",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/mg_scissors.gif"
    },
    zombie_outfit: {
      name: "Zombie HOA Outfit",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat4.gif"
    },
    eyes: {
      name: "HOA zombie eyes",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/zh_eyes.gif"
    },
    ghost_outfit1: {
      name: "Ghost Outfit",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat5.gif"
    },
    sash1: {
      name: "Mayor Ghost's Sash",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/mg_sash.gif"
    },
    gavel1: {
      name: "Mayor Ghost's Gavel",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/mg_gavel.gif"
    },
    scissors11: {
      name: "Mayor Ghost's Scissors",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/mg_scissors.gif"
    },
    zombie_outfit1: {
      name: "Zombie HOA Outfit",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat4.gif"
    },
    eyes1: {
      name: "HOA zombie eyes",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/zh_eyes.gif"
    },
    ghost_outfit22: {
      name: "Ghost Outfit",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat5.gif"
    },
    sash2: {
      name: "Mayor Ghost's Sash",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/mg_sash.gif"
    },
    gavel2: {
      name: "Mayor Ghost's Gavel",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/mg_gavel.gif"
    },
    scissors2: {
      name: "Mayor Ghost's Scissors",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/mg_scissors.gif"
    },
    zombie_outfit2: {
      name: "Zombie HOA Outfit",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat4.gif"
    },
    eyes2: {
      name: "HOA zombie eyes",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/zh_eyes.gif"
    }
  };

  makeListElement = function(drop, dropID, has) {
    var dropdown, i, li, max, onChange, span, _i;
    li = $("<li id='" + dropID + "'></li>").append(("<span class='name'> <img height='24' width='24' src='" + drop.image + "'/> &nbsp;") + drop.name + "</span>");
    dropdown = $("<select>  </select>");
    max = drop.max;
    for (i = _i = 0; 0 <= max ? _i <= max : _i >= max; i = 0 <= max ? ++_i : --_i) {
      if (i === parseFloat(has)) {
        dropdown.append("<option selected='selected'>" + i + "</option>");
      } else {
        dropdown.append("<option>" + i + "</option>");
      }
    }
    span = $("<span/>").addClass("selection").append(dropdown);
    li.append(span);
    onChange = function() {
      var isComplete, markedComplete;
      console.log("changed!!!");
      isComplete = $(this).val() >= max;
      markedComplete = this.parentElement.parentElement.parentElement.id === "complete";
      if (isComplete && !markedComplete) {
        console.log("moving to complete");
        return $("#complete").append(this.parentElement.parentElement);
      } else if ((!isComplete) && markedComplete) {
        $("#wanted").append(this.parentElement.parentElement);
        return console.log("moving to wanted");
      }
    };
    dropdown.bind("change", onChange);
    if (parseFloat(has) >= parseFloat(drop.max)) {
      li.addClass("complete");
    }
    return li;
  };

  fishes = null;

  startUp = function() {
    fishes = new Firebase(wishListURL);
    return fishes.once('value', setAutoComplete);
  };

  setAutoComplete = function(snapshot) {
    var available_names, player;
    data = snapshot.val();
    playerLookup = {};
    available_names = [];
    for (player in data) {
      console.log("player: " + player);
      console.log(data[player].player);
      available_names.push(data[player].player);
      playerLookup[data[player].player] = player;
    }
    $("#tags").autocomplete({
      source: available_names
    });
    return $("#tags").autocomplete({
      close: checkLists
    });
  };

  checkLists = function() {
    var name, pid;
    name = $("#tags").val();
    pid = playerLookup[name];
    if (pid != null) {
      playerData = data[pid].wants;
      createList(playerData);
      return playerURL = wishListURL + ("/" + pid + "/wants");
    }
  };

  createList = function(snapshot) {
    var all, drop, has, item, li, priority, _i, _len, _results;
    $("#wanted").empty();
    $("#unwanted").empty();
    $("#complete").empty();
    document.getElementById("content").hidden = false;
    for (drop in playerData) {
      console.log("fishes: " + drop);
    }
    all = [];
    for (drop in dropList) {
      if ((playerData[drop] != null)) {
        has = playerData[drop].has;
        priority = playerData[drop].priority;
      } else {
        has = 0;
        priority = Infinity;
      }
      li = makeListElement(dropList[drop], drop, has);
      all.push({
        el: li,
        priority: priority,
        complete: has >= dropList[drop].max
      });
    }
    all.sort(function(a, b) {
      return a.priority - b.priority;
    });
    _results = [];
    for (_i = 0, _len = all.length; _i < _len; _i++) {
      item = all[_i];
      if (item.complete) {
        _results.push($("#complete").append(item.el));
      } else if (item.priority < 0) {
        _results.push($("#unwanted").append(item.el));
      } else {
        _results.push($("#wanted").append(item.el));
      }
    }
    return _results;
  };

  window.Run = startUp;

  sample_data = {
    dread: {
      wishlists: [
        {
          player: "starwed",
          wants: {
            ghost_outfit: {
              has: 2,
              priority: 8
            },
            sash: {
              has: 0,
              priority: 3
            }
          }
        }
      ]
    }
  };

  /* wanted design
  	CreateList: creates an array of element ids from a list  <-- this is all I need!
  
  	CreateWishlist:
  		gets a list of wanted items
  			for each, specify number and priority
  		get a list of not wanted items
  			for each, specify number and priority (negative)
  
  		That's it!
  */


  window.saveList = function() {
    var complete_items, err, has, id, newWishList, playerWishes, priority, spurned_items, wanted_items, _i, _j, _k, _len, _len1, _len2;
    $("#save_feedback").text("");
    wanted_items = $("#wanted").sortable("toArray");
    priority = 1;
    newWishList = {};
    for (_i = 0, _len = wanted_items.length; _i < _len; _i++) {
      id = wanted_items[_i];
      has = $("#" + id).find("select").val();
      newWishList[id] = {
        has: has,
        priority: priority
      };
      priority++;
    }
    spurned_items = $("#unwanted").sortable("toArray");
    priority = -100;
    for (_j = 0, _len1 = spurned_items.length; _j < _len1; _j++) {
      id = spurned_items[_j];
      has = $("#" + id).find("select").val();
      newWishList[id] = {
        has: has,
        priority: priority
      };
      priority++;
    }
    complete_items = $("#complete").sortable("toArray");
    priority = 10000;
    for (_k = 0, _len2 = complete_items.length; _k < _len2; _k++) {
      id = complete_items[_k];
      has = $("#" + id).find("select").val();
      newWishList[id] = {
        has: has,
        priority: priority
      };
      priority++;
    }
    err = function(e) {
      if (e != null) {
        console.log('Data could not be saved.' + error);
        return $("#save_feedback").text("ERROR!  Wishlist not saved!");
      } else {
        console.log("data saved");
        return $("#save_feedback").text("Wishlist saved");
      }
    };
    playerWishes = new Firebase(playerURL);
    return playerWishes.set(newWishList, err);
  };

}).call(this);
