// Generated by CoffeeScript 1.4.0
(function() {
  var checkLists, createList, data, dropList, fishes, makeListElement, parseCells, playerData, playerLookup, playerURL, sample_data, setAutoComplete, spreadsheet_key, startUp, wishListURL;

  playerURL = "";

  wishListURL = "https://afh.firebaseio.com/dread/wishlists/";

  playerData = null;

  data = null;

  playerLookup = null;

  spreadsheet_key = ["name", "bugbear_outfit", "pyj", "qys", "hys", "wolf_outfit", "lice", "rocket", "trousers", "ghost_outfit", "scissors", "sash", "gavel", "zombie_outfit", "book", "eyes", "pad", "skeleton_outfit", "sword", "leg", "shield", "vampire_outfit", "ring", "glass", "bell", "capacitor"];

  dropList = {
    capacitor: {
      name: "Skull capacitor",
      max: 5,
      image: "http://images.kingdomofloathing.com/itemimages/dv_skullcap.gif",
      cat: "special"
    },
    wolf_outfit: {
      name: "Wolf Outfit",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat3.gif",
      cat: "wolf"
    },
    lice: {
      name: "Great Wolf's lice",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/ww_lice.gif",
      cat: "wolf"
    },
    rocket: {
      name: "Great Wolf's rocket launcher",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/ww_bazooka.gif",
      cat: "wolf"
    },
    trousers: {
      name: "Great Wolf's beastly trousers",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/ww_pants.gif",
      cat: "wolf"
    },
    bugbear_outfit: {
      name: "Bugbear Outfit",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat2.gif",
      cat: "bugbear"
    },
    pyj: {
      name: "Protects-Your-Junk",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/bb_speedo.gif",
      cat: "bugbear"
    },
    qys: {
      name: "Quiets-Your-Steps",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/bb_shoes.gif",
      cat: "bugbear"
    },
    hys: {
      name: "Helps-You-Sleep",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/bb_mask.gif",
      cat: "bugbear"
    },
    ghost_outfit: {
      name: "Ghost Outfit",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat5.gif",
      cat: "ghost"
    },
    scissors: {
      name: "Mayor Ghost's scissors",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/mg_scissors.gif",
      cat: "ghost"
    },
    sash: {
      name: "Mayor Ghost's sash",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/mg_sash.gif",
      cat: "ghost"
    },
    gavel: {
      name: "Mayor Ghost's gavel",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/mg_gavel.gif",
      cat: "ghost"
    },
    zombie_outfit: {
      name: "Zombie Outfit",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat4.gif",
      cat: "zombie"
    },
    book: {
      name: "HOA regulation book",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/book4.gif",
      cat: "zombie"
    },
    eyes: {
      name: "HOA zombie eyes",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/zh_eyes.gif",
      cat: "zombie"
    },
    pad: {
      name: "HOA citation pad",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/zh_pad.gif",
      cat: "zombie"
    },
    skeleton_outfit: {
      name: "Skeleton Outfit",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat6.gif",
      cat: "skeleton"
    },
    shield: {
      name: "Unkillable Skeleton's shield",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/sk_shield.gif",
      cat: "skeleton"
    },
    sword: {
      name: "Unkillable Skeleton's sawsword",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/sk_sword.gif",
      cat: "skeleton"
    },
    leg: {
      name: "Unkillable Skeleton's restless leg",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/sk_leg.gif",
      cat: "skeleton"
    },
    vampire_outfit: {
      name: "Vampire Outfit",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat7.gif",
      cat: "vampire"
    },
    ring: {
      name: "Drunkula's ring of haze",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/dr_ring.gif",
      cat: "vampire"
    },
    glass: {
      name: "Drunkula's wineglass",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/dr_wineglass.gif",
      cat: "vampire"
    },
    bell: {
      name: "Drunkula's bell",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/dr_bell.gif",
      cat: "vampire"
    }
  };

  makeListElement = function(drop, dropID, has) {
    var dropdown, i, li, max, onChange, span, _i;
    li = $("<li id='" + dropID + "'></li>").append(("<span class='name " + drop.cat + "'> <img height='24' width='24' src='" + drop.image + "'/> &nbsp;") + drop.name + "</span>");
    dropdown = $("<select>  </select>");
    max = drop.max;
    for (i = _i = 0; 0 <= max ? _i <= max : _i >= max; i = 0 <= max ? ++_i : --_i) {
      if (i === parseFloat(has)) {
        dropdown.append("<option selected='selected'>" + i + "</option>");
      } else {
        dropdown.append("<option>" + i + "</option>");
      }
    }
    span = $("<span/>").addClass("selection").append(dropdown);
    li.append(span);
    onChange = function() {
      var isComplete, markedComplete;
      console.log("changed!!!");
      isComplete = $(this).val() >= max;
      markedComplete = this.parentElement.parentElement.parentElement.id === "complete";
      if (isComplete && !markedComplete) {
        console.log("moving to complete");
        return $("#complete").append(this.parentElement.parentElement);
      } else if ((!isComplete) && markedComplete) {
        $("#wanted").append(this.parentElement.parentElement);
        return console.log("moving to wanted");
      }
    };
    dropdown.bind("change", onChange);
    if (parseFloat(has) >= parseFloat(drop.max)) {
      li.addClass("complete");
    }
    return li;
  };

  fishes = null;

  parseCells = function(d) {
    var Table, add, cell, cells, entry, row, test, _i, _j, _len, _len1;
    Table = [];
    add = function(r, c, val) {
      if (!(Table[r] != null)) {
        Table[r] = [];
      }
      return Table[r][c] = val;
    };
    cells = d.feed.entry;
    for (_i = 0, _len = cells.length; _i < _len; _i++) {
      entry = cells[_i];
      cell = entry.gs$cell;
      add(cell.row, cell.col, cell.$t);
    }
    test = [];
    for (_j = 0, _len1 = Table.length; _j < _len1; _j++) {
      row = Table[_j];
      if (row != null) {
        console.log(row);
      }
    }
    return Table;
  };

  startUp = function() {
    var key, url;
    key = "0AkCuuVp5c_x-dFBRdHFQMnQyTGZINWVZaDkySWdnWHc";
    url = "https://spreadsheets.google.com/feeds/cells/" + key + "/od6/public/values?alt=json-in-script&callback=?";
    $.getJSON(url, {}, parseCells);
    return;
    fishes = new Firebase(wishListURL);
    return fishes.once('value', setAutoComplete);
  };

  setAutoComplete = function(snapshot) {
    var available_names, player;
    data = snapshot.val();
    playerLookup = {};
    available_names = [];
    for (player in data) {
      console.log("player: " + player);
      console.log(data[player].player);
      available_names.push(data[player].player);
      playerLookup[data[player].player] = player;
    }
    $("#tags").autocomplete({
      source: available_names
    });
    return $("#tags").autocomplete({
      close: checkLists
    });
  };

  checkLists = function() {
    var name, pid;
    name = $("#tags").val();
    pid = playerLookup[name];
    if (pid != null) {
      playerData = data[pid].wants;
      createList(playerData);
      return playerURL = wishListURL + ("/" + pid + "/wants");
    }
  };

  createList = function(snapshot) {
    var all, drop, has, item, li, priority, _i, _len, _results;
    $("#wanted").empty();
    $("#unwanted").empty();
    $("#complete").empty();
    document.getElementById("content").hidden = false;
    for (drop in playerData) {
      console.log("fishes: " + drop);
    }
    all = [];
    for (drop in dropList) {
      if ((playerData[drop] != null)) {
        has = playerData[drop].has;
        priority = playerData[drop].priority;
      } else {
        has = 0;
        priority = Infinity;
      }
      li = makeListElement(dropList[drop], drop, has);
      all.push({
        el: li,
        priority: priority,
        complete: has >= dropList[drop].max
      });
    }
    all.sort(function(a, b) {
      return a.priority - b.priority;
    });
    _results = [];
    for (_i = 0, _len = all.length; _i < _len; _i++) {
      item = all[_i];
      if (item.complete) {
        _results.push($("#complete").append(item.el));
      } else if (item.priority < 0) {
        _results.push($("#unwanted").append(item.el));
      } else {
        _results.push($("#wanted").append(item.el));
      }
    }
    return _results;
  };

  window.Run = startUp;

  sample_data = {
    dread: {
      wishlists: [
        {
          player: "starwed",
          wants: {
            ghost_outfit: {
              has: 2,
              priority: 8
            },
            sash: {
              has: 0,
              priority: 3
            }
          }
        }
      ]
    }
  };

  /* wanted design
  	CreateList: creates an array of element ids from a list  <-- this is all I need!
  
  	CreateWishlist:
  		gets a list of wanted items
  			for each, specify number and priority
  		get a list of not wanted items
  			for each, specify number and priority (negative)
  
  		That's it!
  */


  window.saveList = function() {
    var complete_items, err, has, id, newWishList, playerWishes, priority, spurned_items, wanted_items, _i, _j, _k, _len, _len1, _len2;
    $("#save_feedback").text("");
    wanted_items = $("#wanted").sortable("toArray");
    priority = 1;
    newWishList = {};
    for (_i = 0, _len = wanted_items.length; _i < _len; _i++) {
      id = wanted_items[_i];
      has = $("#" + id).find("select").val();
      newWishList[id] = {
        has: has,
        priority: priority
      };
      priority++;
    }
    spurned_items = $("#unwanted").sortable("toArray");
    priority = -100;
    for (_j = 0, _len1 = spurned_items.length; _j < _len1; _j++) {
      id = spurned_items[_j];
      has = $("#" + id).find("select").val();
      newWishList[id] = {
        has: has,
        priority: priority
      };
      priority++;
    }
    complete_items = $("#complete").sortable("toArray");
    priority = 10000;
    for (_k = 0, _len2 = complete_items.length; _k < _len2; _k++) {
      id = complete_items[_k];
      has = $("#" + id).find("select").val();
      newWishList[id] = {
        has: has,
        priority: priority
      };
      priority++;
    }
    err = function(e) {
      if (e != null) {
        console.log('Data could not be saved.' + error);
        return $("#save_feedback").text("ERROR!  Wishlist not saved!");
      } else {
        console.log("data saved");
        return $("#save_feedback").text("Wishlist saved");
      }
    };
    playerWishes = new Firebase(playerURL);
    return playerWishes.set(newWishList, err);
  };

  window.showNewPlayer = function() {
    return document.getElementById("new").hidden = false;
  };

  window.hideNewPlayer = function() {
    document.getElementById("new").hidden = true;
    document.getElementById("new-name").value = "";
    return document.getElementById("new-pid").value = "";
  };

}).call(this);
