// Generated by CoffeeScript 1.6.3
(function() {
  var assignLoot, clanSize, clanWants, createRowData, createTable, displayGet, dropList, logit, parseCells, percentagesComplete, processLoot, spreadsheet_key;

  logit = function(text) {
    if (typeof console === "object") {
      return console.log(text);
    }
  };

  parseCells = function(d) {
    var Table, add, cell, cells, entry, _i, _len;
    Table = [];
    add = function(r, c, val) {
      if (Table[r] == null) {
        Table[r] = [];
      }
      return Table[r][c - 1] = val;
    };
    cells = d.feed.entry;
    for (_i = 0, _len = cells.length; _i < _len; _i++) {
      entry = cells[_i];
      cell = entry.gs$cell;
      add(cell.row, cell.col, cell.$t);
    }
    return Table;
  };

  clanWants = {};

  percentagesComplete = {};

  clanSize = 0;

  createRowData = function(tableData) {
    var accounts, cat, catsComplete, completion, has, havematch, hmcompletion, i, info, item, match, max, name, numbermatch, outfitcompletion, pmatch, pnumber, row, text, wants, _i, _j, _len;
    accounts = {};
    clanSize = 0;
    for (_i = 0, _len = tableData.length; _i < _len; _i++) {
      row = tableData[_i];
      if ((row != null ? row[0] : void 0) == null) {
        continue;
      }
      name = row[0].trim().toLowerCase().replace(/\s/g, "_");
      accounts[name] = {};
      clanSize++;
      for (i = _j = 1; _j <= 25; i = ++_j) {
        item = spreadsheet_key[i];
        text = row[i];
        if (text == null) {
          text = "";
        }
        text = text.trim().toLowerCase();
        if (text.indexOf("low") >= 0) {
          pnumber = Infinity;
        } else if (text.indexOf("p") >= 0) {
          pmatch = /p[\s-]*(\d+)/;
          pnumber = pmatch.exec(text);
          if ((pnumber != null ? pnumber[1] : void 0) != null) {
            pnumber = pnumber[1];
          } else {
            pnumber = 1;
          }
        } else if (/\bno?\b/.exec(text) !== null) {
          pnumber = -100;
        } else {
          if (dropList[item].max === 3) {
            pnumber = 10000000;
          } else if (dropList[item].max === 5) {
            pnumber = 100000;
          } else {
            pnumber = 1000000;
          }
        }
        havematch = /have\s*(\d+)/;
        match = havematch.exec(text);
        if ((match != null ? match[1] : void 0) != null) {
          has = match[1];
        } else {
          numbermatch = /(\d+)/;
          match = numbermatch.exec(text);
          if (pnumber >= 0 && pnumber < 100000) {
            has = 0;
          } else if ((match != null ? match[1] : void 0) != null) {
            has = match[1];
          } else if (pnumber < 0) {
            has = dropList[item].max;
          } else {
            has = 0;
          }
        }
        if (has >= dropList[item].max) {
          pnumber = -100;
        } else {
          if (clanWants[item] == null) {
            clanWants[item] = 0;
          }
          clanWants[item] += dropList[item].max - has;
        }
        accounts[name][item] = {
          has: has,
          priority: pnumber,
          text: text
        };
      }
    }
    catsComplete = {};
    for (item in clanWants) {
      wants = clanWants[item];
      logit("" + item + ":" + wants);
      max = dropList[item].max;
      percentagesComplete[item] = 1 - wants / (max * clanSize);
      cat = dropList[item].cat;
      if (catsComplete[cat] == null) {
        catsComplete[cat] = {
          size: 0,
          wanted: 0,
          hmsize: 0,
          hmwanted: 0,
          outfitsize: 0,
          outfitwanted: 0
        };
      }
      if (max === 1) {
        catsComplete[cat].hmsize += clanSize;
        catsComplete[cat].hmwanted += wants;
      } else if (max === 3) {
        catsComplete[cat].outfitsize += clanSize * 3;
        catsComplete[cat].outfitwanted += wants;
      }
      catsComplete[cat].size += max * clanSize;
      catsComplete[cat].wanted += wants;
    }
    logit(percentagesComplete);
    for (cat in catsComplete) {
      info = catsComplete[cat];
      completion = 1 - info.wanted / info.size;
      completion = Math.floor(completion * 1000) / 10;
      if (info.hmsize > 0) {
        hmcompletion = 1 - info.hmwanted / info.hmsize;
        hmcompletion = Math.floor(hmcompletion * 1000) / 10;
      }
      if (info.outfitsize > 0) {
        outfitcompletion = 1 - info.outfitwanted / info.outfitsize;
        outfitcompletion = Math.floor(outfitcompletion * 1000) / 10;
        logit("" + cat + "\t " + outfitcompletion + "\t" + hmcompletion + "\t" + completion);
      } else {
        logit("Capacitor is at " + completion + "% completion");
      }
    }
    return accounts;
  };

  displayGet = function(gets) {
    if (gets.length > 0) {
      return gets.toString();
    } else {
      return "--";
    }
  };

  createTable = function(tableData, columns, distroList, lootList) {
    var $table, $thr, $tr, accounts, cl, countLootLeft, data, distroPriority, drop, e, i, item, l, lastcat, leftover, name, num, number, row, row_list, text, wishes, _i, _j, _k, _len, _len1, _len2;
    $table = $("<table/>");
    $table.addClass("table").addClass("table-striped");
    $thr = $("<tr/>");
    lastcat = null;
    for (_i = 0, _len = columns.length; _i < _len; _i++) {
      i = columns[_i];
      item = spreadsheet_key[i];
      if (item === "name") {
        $thr.append("<th>Name</th>");
      } else {
        drop = dropList[item];
        if (lootList[item] > 1) {
          num = " (x" + lootList[item] + ")";
        } else {
          num = '';
        }
        $thr.append("<th class='" + drop.cat + "'>" + drop.shortname + num + "</th>");
      }
    }
    $thr.append("<th class='loot'>Distro</th>");
    $table.append($thr);
    row_list = [];
    accounts = createRowData(tableData);
    for (name in accounts) {
      wishes = accounts[name];
      distroPriority = distroList.indexOf(name);
      if (distroPriority < 0) {
        continue;
      }
      $tr = $("<tr/>");
      for (_j = 0, _len1 = columns.length; _j < _len1; _j++) {
        i = columns[_j];
        if (i === 0) {
          cl = "name";
          text = name;
          item = "name";
        } else {
          distroPriority = distroList.indexOf(name);
          item = spreadsheet_key[i];
          try {
            data = wishes[item];
            text = data.has;
          } catch (_error) {
            e = _error;
            logit("item: " + item + ", account: " + name);
          }
          if (data.priority < 0) {
            if (data.has >= dropList[item].max) {
              cl = "has";
            } else {
              cl = "unwanted";
              text = "-";
            }
          } else if (data.priority < 10000) {
            cl = "priority";
            text += " [P" + data.priority + "]";
          } else {
            cl = "wanted";
          }
          text = data.text;
        }
        $tr.append("<td id='" + name + "-" + item + "' class='" + cl + "'>" + text + "</td>");
      }
      row_list.push({
        el: $tr,
        priority: distroPriority,
        wishes: wishes,
        name: name,
        gets: []
      });
    }
    $("#loot-table-holder").append($table);
    row_list.sort(function(a, b) {
      return a.priority - b.priority;
    });
    countLootLeft = function(list) {
      var n, number;
      n = 0;
      for (item in list) {
        number = list[item];
        n += number;
      }
      return n;
    };
    l = countLootLeft(lootList);
    leftover = [];
    while (l > 0) {
      assignLoot(row_list, lootList, $table);
      if (countLootLeft(lootList) === l) {
        for (item in lootList) {
          number = lootList[item];
          if (number > 0) {
            leftover.push("" + item + " (" + number + ")");
          }
        }
        break;
      } else {
        l = countLootLeft(lootList);
      }
    }
    for (_k = 0, _len2 = row_list.length; _k < _len2; _k++) {
      row = row_list[_k];
      row.el.append("<td>" + (displayGet(row.gets)) + "</td>");
      $table.append(row.el);
    }
    return [row_list, leftover];
  };

  assignLoot = function(row_list, lootList, $table) {
    var currentPriority, data, gets, item, row, _i, _len, _ref, _results;
    _results = [];
    for (_i = 0, _len = row_list.length; _i < _len; _i++) {
      row = row_list[_i];
      gets = null;
      currentPriority = Infinity;
      _ref = row.wishes;
      for (item in _ref) {
        data = _ref[item];
        if ((lootList[item] != null) && lootList[item] > 0) {
          if (data.priority <= currentPriority && data.priority >= 0 && row.gets.indexOf(item) < 0) {
            currentPriority = data.priority;
            gets = item;
          }
        }
      }
      if (gets != null) {
        lootList[gets]--;
        $("#" + row.name + "-" + gets, row.el).addClass("default-distro");
        logit("" + row.name + "-" + gets);
        _results.push(row.gets.push(gets));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  window.MakeDistroTable = function(bossKills, distroList, Loot, callback) {
    var lootList;
    lootList = processLoot(Loot);
    return window.getWishes(distroList, bossKills, lootList, callback);
  };

  processLoot = function(Loot) {
    var drop, key, line, loot_lines, loot_list, _i, _len, _ref;
    loot_list = {};
    loot_lines = Loot.split("\n");
    for (_i = 0, _len = loot_lines.length; _i < _len; _i++) {
      line = loot_lines[_i];
      for (key in dropList) {
        drop = dropList[key];
        if (line.indexOf(drop.name) >= 0 || ((_ref = drop.match) != null ? _ref.exec(line) : void 0)) {
          if (loot_list[key] != null) {
            loot_list[key]++;
          } else {
            loot_list[key] = 1;
          }
        }
      }
    }
    return loot_list;
  };

  window.getWishes = function(distroList, bossKills, lootList, callback) {
    var columns, doitall, i, item, key, url, _i, _len;
    columns = [0];
    for (i = _i = 0, _len = spreadsheet_key.length; _i < _len; i = ++_i) {
      item = spreadsheet_key[i];
      if (lootList[item] != null) {
        columns.push(i);
      }
    }
    doitall = function(d) {
      var getList, leftover, loot_left, row, rowList, tableData, _j, _len1, _ref;
      tableData = parseCells(d);
      _ref = createTable(tableData, columns, distroList, lootList), rowList = _ref[0], leftover = _ref[1];
      getList = {};
      for (_j = 0, _len1 = rowList.length; _j < _len1; _j++) {
        row = rowList[_j];
        getList[row.name] = row.gets;
      }
      loot_left = leftover.join(", ");
      return callback(getList, loot_left);
    };
    key = "0AkCuuVp5c_x-dFBRdHFQMnQyTGZINWVZaDkySWdnWHc";
    url = "https://spreadsheets.google.com/feeds/cells/" + key + "/od6/public/values?alt=json-in-script&callback=?";
    $.getJSON(url, {}, doitall);
  };

  spreadsheet_key = ["name", "bugbear_outfit", "pyj", "qys", "hys", "wolf_outfit", "lice", "rocket", "trousers", "ghost_outfit", "scissors", "sash", "gavel", "zombie_outfit", "book", "eyes", "pad", "skeleton_outfit", "sword", "leg", "shield", "vampire_outfit", "glass", "bell", "ring", "capacitor"];

  window.dropList = dropList = {
    capacitor: {
      name: "skull capacitor",
      shortname: "Capacitor",
      max: 5,
      image: "http://images.kingdomofloathing.com/itemimages/dv_skullcap.gif",
      cat: "special"
    },
    wolf_outfit: {
      name: "Wolf Outfit",
      shortname: "[Wolf]",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat3.gif",
      cat: "wolf",
      match: /Great Wolf's (headband|right|left)/
    },
    lice: {
      name: "Great Wolf's lice",
      shortname: "Lice",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/ww_lice.gif",
      cat: "wolf"
    },
    rocket: {
      name: "Great Wolf's rocket launcher",
      shortname: "Rocket",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/ww_bazooka.gif",
      cat: "wolf"
    },
    trousers: {
      name: "Great Wolf's beastly trousers",
      shortname: "Trousers",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/ww_pants.gif",
      cat: "wolf"
    },
    bugbear_outfit: {
      name: "Bugbear Outfit",
      shortname: "[Bugbear]",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat2.gif",
      cat: "bugbear",
      match: /(Drapes-|Warms-|Covers-)You/
    },
    pyj: {
      name: "Protects-Your-Junk",
      shortname: "PYJ",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/bb_speedo.gif",
      cat: "bugbear"
    },
    qys: {
      name: "Quiets-Your-Steps",
      shortname: "QYS",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/bb_shoes.gif",
      cat: "bugbear"
    },
    hys: {
      name: "Helps-You-Sleep",
      shortname: "HYS",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/bb_mask.gif",
      cat: "bugbear"
    },
    ghost_outfit: {
      name: "Ghost Outfit",
      shortname: "[Ghost]",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat5.gif",
      cat: "ghost",
      match: /Mayor Ghost's (cloak|khakis|toupee)/
    },
    scissors: {
      name: "Mayor Ghost's scissors",
      shortname: "Scissors",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/mg_scissors.gif",
      cat: "ghost"
    },
    sash: {
      name: "Mayor Ghost's sash",
      shortname: "Sash",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/mg_sash.gif",
      cat: "ghost"
    },
    gavel: {
      name: "Mayor Ghost's gavel",
      shortname: "Gavel",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/mg_gavel.gif",
      cat: "ghost"
    },
    zombie_outfit: {
      name: "Zombie Outfit",
      shortname: "[Zombie]",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat4.gif",
      cat: "zombie",
      match: /zombie (mariachi|accordion)/
    },
    book: {
      name: "HOA regulation book",
      shortname: "Book",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/book4.gif",
      cat: "zombie"
    },
    eyes: {
      name: "HOA zombie eyes",
      shortname: "Eyes",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/zh_eyes.gif",
      cat: "zombie"
    },
    pad: {
      name: "HOA citation pad",
      shortname: "Pad",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/zh_pad.gif",
      cat: "zombie"
    },
    skeleton_outfit: {
      name: "Skeleton Outfit",
      shortname: "[Skeleton]",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat6.gif",
      cat: "skeleton",
      match: /Unkillable Skeleton's (skullcap|shinguards|breastplate)/
    },
    shield: {
      name: "Unkillable Skeleton's shield",
      shortname: "Shield",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/sk_shield.gif",
      cat: "skeleton"
    },
    sword: {
      name: "Unkillable Skeleton's sawsword",
      shortname: "Sword",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/sk_sword.gif",
      cat: "skeleton"
    },
    leg: {
      name: "Unkillable Skeleton's restless leg",
      shortname: "Leg",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/sk_leg.gif",
      cat: "skeleton"
    },
    vampire_outfit: {
      name: "Vampire Outfit",
      shortname: "[Vampire]",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat7.gif",
      cat: "vampire",
      match: /unkula's (drinking|silky|cape)/
    },
    ring: {
      name: "Drunkula's ring of haze",
      shortname: "Ring",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/dr_ring.gif",
      cat: "vampire"
    },
    glass: {
      name: "Drunkula's wineglass",
      shortname: "Wineglass",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/dr_wineglass.gif",
      cat: "vampire"
    },
    bell: {
      name: "Drunkula's bell",
      shortname: "Bell",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/dr_bell.gif",
      cat: "vampire"
    }
  };

}).call(this);
