// Generated by CoffeeScript 1.4.0
(function() {
  var createRowData, createTable, dropList, logit, parseCells, processLoot, spreadsheet_key;

  logit = function(text) {
    if (typeof console === "object") {
      return console.log(text);
    }
  };

  parseCells = function(d) {
    var Table, add, cell, cells, entry, _i, _len;
    Table = [];
    add = function(r, c, val) {
      if (!(Table[r] != null)) {
        Table[r] = [];
      }
      return Table[r][c - 1] = val;
    };
    cells = d.feed.entry;
    for (_i = 0, _len = cells.length; _i < _len; _i++) {
      entry = cells[_i];
      cell = entry.gs$cell;
      add(cell.row, cell.col, cell.$t);
    }
    return Table;
  };

  createRowData = function(tableData) {
    var accounts, has, havematch, i, item, match, name, numbermatch, pmatch, pnumber, row, text, _i, _j, _len;
    accounts = {};
    for (_i = 0, _len = tableData.length; _i < _len; _i++) {
      row = tableData[_i];
      if (!((row != null ? row[0] : void 0) != null)) {
        continue;
      }
      name = row[0].trim().toLowerCase().replace(/\s/g, "_");
      accounts[name] = {};
      for (i = _j = 1; _j <= 25; i = ++_j) {
        item = spreadsheet_key[i];
        text = row[i];
        if (!(text != null)) {
          text = "";
        }
        text = text.trim().toLowerCase();
        if (text.indexOf("p") >= 0) {
          pmatch = /p[\s-]*(\d+)/;
          pnumber = pmatch.exec(text);
          if ((pnumber != null ? pnumber[1] : void 0) != null) {
            pnumber = pnumber[1];
          } else {
            pnumber = 1;
          }
        } else if (text.indexOf("n") >= 0) {
          pnumber = -100;
        } else {
          if (dropList[item].max === 3) {
            pnumber = Infinity;
          } else if (dropList[item].max === 5) {
            pnumber = 100000;
          } else {
            pnumber = 1000000;
          }
        }
        havematch = /have\s*(\d+)/;
        match = havematch.exec(text);
        if ((match != null ? match[1] : void 0) != null) {
          has = match[1];
        } else {
          numbermatch = /(\d+)/;
          match = numbermatch.exec(text);
          if (pnumber >= 0 && pnumber < 100000) {
            has = 0;
          } else if ((match != null ? match[1] : void 0) != null) {
            has = match[1];
          } else {
            has = 0;
          }
        }
        if (has >= dropList[item].max) {
          pnumber = -100;
        }
        accounts[name][item] = {
          has: has,
          priority: pnumber,
          text: text
        };
      }
    }
    return accounts;
  };

  createTable = function(tableData, columns, distroList, lootList) {
    var $table, $thr, $tr, accounts, cl, currentPriority, data, distroPriority, drop, gets, i, item, lastcat, name, row, row_list, text, wishes, _i, _j, _k, _len, _len1, _len2, _ref;
    $table = $("<table/>");
    $thr = $("<tr/>");
    lastcat = null;
    for (_i = 0, _len = columns.length; _i < _len; _i++) {
      i = columns[_i];
      item = spreadsheet_key[i];
      if (item === "name") {
        $thr.append("<th>Name</th>");
      } else {
        drop = dropList[item];
        $thr.append("<th class='" + drop.cat + "'>" + drop.shortname + "</th>");
      }
    }
    $thr.append("<th class='loot'>Distro</th>");
    $table.append($thr);
    row_list = [];
    accounts = createRowData(tableData);
    for (name in accounts) {
      wishes = accounts[name];
      distroPriority = distroList.indexOf(name);
      if (distroPriority < 0) {
        continue;
      }
      $tr = $("<tr/>");
      for (_j = 0, _len1 = columns.length; _j < _len1; _j++) {
        i = columns[_j];
        if (i === 0) {
          cl = "name";
          text = name;
        } else {
          distroPriority = distroList.indexOf(name);
          item = spreadsheet_key[i];
          try {
            data = wishes[item];
            text = data.has;
          } catch (e) {
            logit("item: " + item + ", account: " + name);
          }
          if (data.priority < 0) {
            if (data.has >= dropList[item].max) {
              cl = "has";
            } else {
              cl = "unwanted";
              text = "-";
            }
          } else if (data.priority < 10000) {
            cl = "priority";
            text += " [P" + data.priority + "]";
          } else {
            cl = "wanted";
          }
          text = data.text;
        }
        $tr.append("<td class='" + cl + "'>" + text + "</td>");
      }
      row_list.push({
        el: $tr,
        priority: distroPriority,
        wishes: wishes,
        name: name
      });
    }
    row_list.sort(function(a, b) {
      return a.priority - b.priority;
    });
    for (_k = 0, _len2 = row_list.length; _k < _len2; _k++) {
      row = row_list[_k];
      gets = null;
      currentPriority = Infinity;
      _ref = row.wishes;
      for (item in _ref) {
        data = _ref[item];
        if ((lootList[item] != null) && lootList[item] > 0) {
          if (data.priority <= currentPriority && data.priority >= 0) {
            currentPriority = data.priority;
            gets = item;
          }
        }
      }
      if (!(gets != null)) {
        gets = "--";
      } else {
        lootList[gets]--;
      }
      row.el.append("<td>" + gets + "</td>");
      row.gets = gets;
      $table.append(row.el);
    }
    $("body").append($table);
    return row_list;
  };

  window.MakeDistroTable = function(bossKills, distroList, Loot, callback) {
    var lootList;
    lootList = processLoot(Loot);
    return window.getWishes(distroList, bossKills, lootList, callback);
  };

  processLoot = function(Loot) {
    var drop, key, line, loot_lines, loot_list, _i, _len, _ref;
    loot_list = {};
    loot_lines = Loot.split("\n");
    for (_i = 0, _len = loot_lines.length; _i < _len; _i++) {
      line = loot_lines[_i];
      for (key in dropList) {
        drop = dropList[key];
        if (line.indexOf(drop.name) >= 0 || ((_ref = drop.match) != null ? _ref.exec(line) : void 0)) {
          if (loot_list[key] != null) {
            loot_list[key]++;
          } else {
            loot_list[key] = 1;
          }
        }
      }
    }
    return loot_list;
  };

  window.getWishes = function(distroList, bossKills, lootList, callback) {
    var columns, doitall, key, url;
    columns = [0];
    if (bossKills.forest === "wolf") {
      columns.push(1, 2, 3, 4);
    } else {
      columns.push(5, 6, 7, 8);
    }
    if (bossKills.village === "ghost") {
      columns.push(9, 10, 11, 12);
    } else {
      columns.push(13, 14, 15, 16);
    }
    if (bossKills.castle === "vampire") {
      columns.push(17, 18, 19, 20);
    } else {
      columns.push(21, 22, 23, 24);
    }
    columns.push(25);
    doitall = function(d) {
      var getList, row, rowList, table, _i, _len;
      table = parseCells(d);
      rowList = createTable(table, columns, distroList, lootList);
      getList = {};
      for (_i = 0, _len = rowList.length; _i < _len; _i++) {
        row = rowList[_i];
        getList[row.name] = row.gets;
      }
      return callback(getList);
    };
    key = "0AkCuuVp5c_x-dFBRdHFQMnQyTGZINWVZaDkySWdnWHc";
    url = "https://spreadsheets.google.com/feeds/cells/" + key + "/od6/public/values?alt=json-in-script&callback=?";
    $.getJSON(url, {}, doitall);
  };

  spreadsheet_key = ["name", "bugbear_outfit", "pyj", "qys", "hys", "wolf_outfit", "lice", "rocket", "trousers", "ghost_outfit", "scissors", "sash", "gavel", "zombie_outfit", "book", "eyes", "pad", "skeleton_outfit", "sword", "leg", "shield", "vampire_outfit", "ring", "glass", "bell", "capacitor"];

  dropList = {
    capacitor: {
      name: "Skull capacitor",
      shortname: "Capacitor",
      max: 5,
      image: "http://images.kingdomofloathing.com/itemimages/dv_skullcap.gif",
      cat: "special"
    },
    wolf_outfit: {
      name: "Wolf Outfit",
      shortname: "[Wolf]",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat3.gif",
      cat: "wolf",
      match: /Great Wolf's (headband|right|left)/
    },
    lice: {
      name: "Great Wolf's lice",
      shortname: "Lice",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/ww_lice.gif",
      cat: "wolf"
    },
    rocket: {
      name: "Great Wolf's rocket launcher",
      shortname: "Rocket",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/ww_bazooka.gif",
      cat: "wolf"
    },
    trousers: {
      name: "Great Wolf's beastly trousers",
      shortname: "Trousers",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/ww_pants.gif",
      cat: "wolf"
    },
    bugbear_outfit: {
      name: "Bugbear Outfit",
      shortname: "[Bugbear]",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat2.gif",
      cat: "bugbear",
      match: /(Drapes-|Warms-|Covers-)You/
    },
    pyj: {
      name: "Protects-Your-Junk",
      shortname: "PYJ",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/bb_speedo.gif",
      cat: "bugbear"
    },
    qys: {
      name: "Quiets-Your-Steps",
      shortname: "QYS",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/bb_shoes.gif",
      cat: "bugbear"
    },
    hys: {
      name: "Helps-You-Sleep",
      shortname: "HYS",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/bb_mask.gif",
      cat: "bugbear"
    },
    ghost_outfit: {
      name: "Ghost Outfit",
      shortname: "[Ghost]",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat5.gif",
      cat: "ghost",
      match: /Mayor Ghost's (cloak|khakis|toupee)/
    },
    scissors: {
      name: "Mayor Ghost's scissors",
      shortname: "Scissors",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/mg_scissors.gif",
      cat: "ghost"
    },
    sash: {
      name: "Mayor Ghost's sash",
      shortname: "Sash",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/mg_sash.gif",
      cat: "ghost"
    },
    gavel: {
      name: "Mayor Ghost's gavel",
      shortname: "Gavel",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/mg_gavel.gif",
      cat: "ghost"
    },
    zombie_outfit: {
      name: "Zombie Outfit",
      shortname: "[Zombie]",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat4.gif",
      cat: "zombie",
      match: /zombie (mariachi|accordion)/
    },
    book: {
      name: "HOA regulation book",
      shortname: "Book",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/book4.gif",
      cat: "zombie"
    },
    eyes: {
      name: "HOA zombie eyes",
      shortname: "Eyes",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/zh_eyes.gif",
      cat: "zombie"
    },
    pad: {
      name: "HOA citation pad",
      shortname: "Pad",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/zh_pad.gif",
      cat: "zombie"
    },
    skeleton_outfit: {
      name: "Skeleton Outfit",
      shortname: "[Skeleton]",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat6.gif",
      cat: "skeleton",
      match: /Unkillable Skeleton's (skullcap|shinguards|breastplate)/
    },
    shield: {
      name: "Unkillable Skeleton's shield",
      shortname: "Shield",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/sk_shield.gif",
      cat: "skeleton"
    },
    sword: {
      name: "Unkillable Skeleton's sawsword",
      shortname: "Sword",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/sk_sword.gif",
      cat: "skeleton"
    },
    leg: {
      name: "Unkillable Skeleton's restless leg",
      shortname: "Leg",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/sk_leg.gif",
      cat: "skeleton"
    },
    vampire_outfit: {
      name: "Vampire Outfit",
      shortname: "[Vampire]",
      max: 3,
      image: "http://images.kingdomofloathing.com/otherimages/sigils/dvotat7.gif",
      cat: "vampire",
      match: /unkula's (drinking|silky|cape)/
    },
    ring: {
      name: "Drunkula's ring of haze",
      shortname: "Ring",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/dr_ring.gif",
      cat: "vampire"
    },
    glass: {
      name: "Drunkula's wineglass",
      shortname: "Wineglass",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/dr_wineglass.gif",
      cat: "vampire"
    },
    bell: {
      name: "Drunkula's bell",
      shortname: "Bell",
      max: 1,
      image: "http://images.kingdomofloathing.com/itemimages/dr_bell.gif",
      cat: "vampire"
    }
  };

}).call(this);
